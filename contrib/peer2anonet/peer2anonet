#!/bin/bash
#########################################################################
# We need to check for root privileges:
if [[ $(id -u) != 0 ]]; then
 echo "peer2anonet: error: root privileges required."
 exit 1
fi

#########################################################################
# We need to see if service(s) directories exist:
mkdir -p /services
mkdir -p /services/bird
mkdir -p /service

#########################################################################
# Generate new keys:
KEYS=`quicktun.keypair</dev/random`
SECKEY=`echo $KEYS | head -1`
YPUBKEY=`echo $KEYS | head -2 | tail -1`
echo "
peer2anonet: your public key is:

$YPUBKEY

"

#########################################################################
# We need to get info for the new peering and BGP session:
read -p "Enter your peer name/interface: " PEERNAME
read -p "Enter your new network address: " YOURNET
read -p "Enter your new network router address: " YOURROUTE
read -p "Enter your new network ip address: " YOURIP
read -p "Enter your new local port: " YOURPORT
read -p "Enter your new asn: " YOURASN
read -p "Enter your peer remote ip: " REMOTEIP
read -p "Enter your peer anonet ip: " PEERIP
read -p "Enter your peer remote port: " PEERPORT
read -p "Enter your peer asn: " PEERASN
read -p "Enter your peer's public key: " PUBKEY

#########################################################################
# Do some security checks on variables:
TEST[0]=$PEERNAME; TEST[1]=$YOURNET; TEST[2]=$YOURROUTE; TEST[3]=$YOURIP
TEST[4]=$YOURPORT; TEST[5]=$YOURASN; TEST[6]=$REMOTEIP; TEST[7]=$PEERIP
                   TEST[8]=$PEERPORT; TEST[9]=$PEERASN

SECURE() {
          echo "peer2anonet: error: possible malicious code detected"
          echo "offending data: $CHECK"
          exit 1
         }
          

for CHECK in ${TEST[@]}; do
[[ $CHECK == *'rm'* ]] && SECURE
[[ $CHECK == *'mail'* ]] && SECURE
[[ $CHECK == *'cp'* ]] && SECURE
[[ $CHECK == *'mv'* ]] && SECURE
[[ $CHECK == *'ipconfig'* ]] && SECURE
[[ $CHECK == *'iwconfig'* ]] && SECURE
[[ $CHECK == *'ping'* ]] && SECURE
[[ $CHECK == *'make'* ]] && SECURE
[[ $CHECK == *'install'* ]] && SECURE
[[ $CHECK == *'uninstall'* ]] && SECURE
[[ $CHECK == *'map'* ]] && SECURE
[[ $CHECK == *'su'* ]] && SECURE
[[ $CHECK == *'sudo'* ]] && SECURE
[[ $CHECK == *'$'* ]] && SECURE
[[ $CHECK == *'!'* ]] && SECURE
[[ $CHECK == *'echo'* ]] && SECURE
[[ $CHECK == *'netcat'* ]] && SECURE
[[ $CHECK == *'id '* ]] && SECURE
[[ $CHECK == *'source'* ]] && SECURE
[[ $CHECK == *'alias '* ]] && SECURE
[[ $CHECK == *'passwd'* ]] && SECURE
[[ $CHECK == *'user'* ]] && SECURE
[[ $CHECK == *'bash'* ]] && SECURE
[[ $CHECK == *'ls '* ]] && SECURE
[[ $CHECK == *'ssh'* ]] && SECURE
[[ $CHECK == *'nc '* ]] && SECURE
[[ $CHECK == *'telnet'* ]] && SECURE
[[ $CHECK == *'rdesktop'* ]] && SECURE
[[ $CHECK == *'iptables'* ]] && SECURE
[[ $CHECK == *'}'* ]] && SECURE
[[ $CHECK == *'{'* ]] && SECURE
[[ $CHECK == *'['* ]] && SECURE
[[ $CHECK == *']'* ]] && SECURE
[[ $CHECK == *'('* ]] && SECURE
[[ $CHECK == *')'* ]] && SECURE
[[ $CHECK == *'exec'* ]] && SECURE
[[ $CHECK == *'dash'* ]] && SECURE
[[ $CHECK == *'perl'* ]] && SECURE
[[ $CHECK == *'python'* ]] && SECURE
[[ $CHECK == *'netstat'* ]] && SECURE
[[ $CHECK == *'sockstat'* ]] && SECURE
[[ $CHECK == *'>'* ]] && SECURE
[[ $CHECK == *'<'* ]] && SECURE
[[ $CHECK == *'/'* ]] && SECURE
[[ $CHECK == *'kill'* ]] && SECURE
done

#########################################################################
# We need to check if base files need to be imported to services for bird:
NEW_PROTOCOL="
protocol bgp $PEERNAME'_bgp' { table AnoNet_routes;
 local as $YOURASN;
 neighbor $PEERIP as $PEERASN;
 source address $YOURIP;
 import filter only_AnoNet_ebgp;
 export filter only_AnoNet_ebgp_export;
}"

BIRD_RUN='#!/bin/sh
exec bird -c bird.conf -d'

BIRD_CONF="function n_AnoNet_mine (prefix arg) {
 if arg ~ [ $YOURNET/24+ ] then return true;
return false; };

function n_AnoNet (prefix arg) {
 if arg ~ [ 1.0.0.0/8+ ] then return true;
return false; };

filter only_AnoNet_ebgp {
 if n_AnoNet(net) then
  if !n_AnoNet_mine(net) then
   accept \"AnoNet\";
  else reject \"mine\";
reject \"non-AnoNet\"; };

filter only_AnoNet_ebgp_export {
 if n_AnoNet(net) then accept \"AnoNet\";
reject \"non-AnoNet\"; };

filter only_AnoNet {
 if n_AnoNet(net) then accept \"AnoNet\";
reject \"non-AnoNet\"; };

table AnoNet_routes;

protocol pipe pipe_AnoNet_routes { peer table AnoNet_routes; mode transparent;
 import filter only_AnoNet;
 export filter only_AnoNet;
};

protocol static static_AnoNet_routes { table AnoNet_routes;
 route $YOURROUTE/24 drop;
}

protocol kernel {
 scan time 10;
 import all;
 export all;
}

protocol device {
 scan time 900;
}

protocol direct direct_AnoNet_routes { table AnoNet_routes;
 interface \"eth0\";
 import filter only_AnoNet;
}"



test -e /services/bird/bird.conf || echo "$BIRD_CONF" > /services/bird/bird.conf
test -e /services/bird/run || echo "$BIRD_RUN" > /services/bird/run
chmod +x /services/bird/run
echo "$NEW_PROTOCOL" >> /services/bird/bird.conf

#########################################################################
# We need to check if this peering session already exists:
test -e /services/"$PEERNAME" && rm -r /services/"$PEERNAME"
mkdir -p /services/"$PEERNAME"


#########################################################################
# Create files to configure the new peering session:
echo "#!/bin/sh
export REMOTE_ADDRESS=$REMOTEIP
export REMOTE_PORT=$PEERPORT
export LOCAL_PORT=$YOURPORT
export PRIVATE_KEY=${SECKEY/'SECRET: /}
export PUBLIC_KEY=$PUBKEY
export TUN_MODE=1
export INTERFACE=ppp-$PEERNAME
( sleep 5;
 ip addr add $YOURIP peer $PEERIP/32 dev \$INTERFACE scope link
 ip addr add $YOURROUTE/32 dev \$INTERFACE scope global
 ip link set dev \$INTERFACE up
) &
exec /usr/sbin/quicktun.nacltai" > /services/"$PEERNAME"/run
chmod +x /services/"$PEERNAME"/run

#########################################################################
# Configure and start our new peering session:
ln -s /services/"$PEERNAME" /service/
echo "peer2anonet: New peering session configured
"
exit 0






