#!/bin/bash
if [[ $(id -u) != 0 ]]; then
    echo "error: root privileges required."
    exit 1
fi

USAGE(){
    echo -e '\npeer2anonet:'
    echo -e '\n    --configure             generate a new local configuration and exit'
    echo -e '\n    --update                regenerate peer configurations'
    echo -e '\n    --configure-peer        generate a new peer configuration and update'
    echo -e '\n    --rm-peer               remove a peer configuration and update'
    echo -e '\n    --install-daemontools   installs daemontools\n'
    exit 0
    }

mkdir -p /service
mkdir -p /services
mkdir -p /services/bird
mkdir -p /etc/peer2anonet
mkdir -p /etc/peer2anonet/peers

if [ -e /etc/peer2anonet/p2a.conf ]; then
    source /etc/peer2anonet/p2a.conf
else
    echo "peer2anonet: needs --configure prior to usage"
    exit 1
fi

CONFIGURE(){
    echo -e '\nCONFIGURE:\n'
    read -p "   Enter your AnoNet subnet: " P2A_NET
    read -p "   Enter your AnoNet router: " P2A_ROUTE
    read -p "   Enter your peering ip: " P2A_IP
    read -p "   Enter your AnoNet asn: " P2A_ASN
    echo "P2A_NET=\"$P2A_NET\"">/etc/peer2anonet/p2a.conf
    echo "P2A_ROUTE=\"$P2A_ROUTE\"">>/etc/peer2anonet/p2a.conf
    echo "P2A_IP=\"$P2A_IP\"">>/etc/peer2anonet/p2a.conf
    echo "P2A_ASN=\"$P2A_ASN\"">>/etc/peer2anonet/p2a.conf
    echo -e '\npeer2anonet: configured\n'
    exit 0
    }

UPDATE(){
    echo -e '\nUPDATE:\n'
    if [[ $(ls /etc/peer2anonet/peers) ]]; then
        for PEER in `ls /etc/peer2anonet/peers`; do
            if [ -e /etc/peer2anonet/peers/"$PEER"/remote_ip ]; then
                if [[ $(echo X`cat /etc/peer2anonet/peers/"$PEER"/remote_ip`) == 'X' ]]; then
                    echo "   error: /etc/peer2anonet/peers/$PEER/remote_ip is void"
                    exit 1
                fi
            else
                echo "   error: /etc/peer2anonet/peers/$PEER/remote_ip not exists"
                exit 1
            fi

            if [ -e /etc/peer2anonet/peers/"$PEER"/peering_ip ]; then
                if [[ $(echo X`cat /etc/peer2anonet/peers/"$PEER"/peering_ip`) == 'X' ]]; then
                    echo "   error: /etc/peer2anonet/peers/$PEER/peering_ip is void"
                    exit 1
                fi
            else
                echo "   error: /etc/peer2anonet/peers/$PEER/peering_ip not exists"
                exit 1
            fi

            if [ -e /etc/peer2anonet/peers/"$PEER"/port ]; then
                if [[ $(echo X`cat /etc/peer2anonet/peers/"$PEER"/port`) == 'X' ]]; then
                    echo "   error: /etc/peer2anonet/peers/$PEER/port is void"
                    exit 1
                fi
            else
                echo "   error: /etc/peer2anonet/peers/$PEER/port not exists"
                exit 1
            fi

            if [ -e /etc/peer2anonet/peers/"$PEER"/asn ]; then
                if [[ $(echo X`cat /etc/peer2anonet/peers/"$PEER"/asn`) == 'X' ]]; then
                    echo "   error: /etc/peer2anonet/peers/$PEER/asn is void"
                    exit 1
                fi
            else
                echo "   error: /etc/peer2anonet/peers/$PEER/asn not exists"
                exit 1
            fi

            if [ -e /etc/peer2anonet/peers/"$PEER"/pubkey ]; then
                if [[ $(echo X`cat /etc/peer2anonet/peers/"$PEER"/pubkey`) == 'X' ]]; then
                    echo "   error: /etc/peer2anonet/peers/$PEER/pubkey is void"
                    exit 1
                fi
            else
                echo "   error: /etc/peer2anonet/peers/$PEER/pubkey not exists"
                exit 1
            fi

            if [ -e /etc/peer2anonet/peers/"$PEER"/seckey ]; then
                if [[ $(echo X`cat /etc/peer2anonet/peers/"$PEER"/seckey`) == 'X' ]]; then
                    echo "   error: /etc/peer2anonet/peers/$PEER/seckey is void"
                    exit 1
                fi
            else
                echo "   error: /etc/peer2anonet/peers/$PEER/seckey not exists"
                exit 1
            fi
        done
    else
        echo "   error: peering configurations not exists"
        exit 1
    fi

    echo '#!/bin/bash
bird -c bird.conf -d' > /services/bird/run
    chmod +x /services/bird/run

    echo "function n_AnoNet_mine (prefix arg) {
 if arg ~ [ $P2A_NET/24+ ] then return true;
return false; };

function n_AnoNet (prefix arg) {
 if arg ~ [ 1.0.0.0/8+ ] then return true;
return false; };

filter only_AnoNet_ebgp {
 if n_AnoNet(net) then
  if !n_AnoNet_mine(net) then
   accept \"AnoNet\";
  else reject \"mine\";
reject \"non-AnoNet\"; };

filter only_AnoNet_ebgp_export {
 if n_AnoNet(net) then accept \"AnoNet\";
reject \"non-AnoNet\"; };

filter only_AnoNet {
 if n_AnoNet(net) then accept \"AnoNet\";
reject \"non-AnoNet\"; };

table AnoNet_routes;

protocol pipe pipe_AnoNet_routes { peer table AnoNet_routes; mode transparent;
 import filter only_AnoNet;
 export filter only_AnoNet;
};

protocol static static_AnoNet_routes { table AnoNet_routes;
 route $P2A_NET/24 drop;
}

protocol kernel {
 scan time 10;
 import all;
 export all;
}

protocol device {
 scan time 900;
}

protocol direct direct_AnoNet_routes { table AnoNet_routes;
 interface \"eth0\";
 import filter only_AnoNet;
}" > /services/bird/bird.conf

    for PEER in `ls /etc/peer2anonet/peers`; do
        mkdir -p /services/"$PEER"
        REMOTEIP=`cat /etc/peer2anonet/peers/"$PEER"/remote_ip`
        PEERIP=`cat /etc/peer2anonet/peers/"$PEER"/peering_ip`
        PEERPORT=`cat /etc/peer2anonet/peers/"$PEER"/port`
        PEERASN=`cat /etc/peer2anonet/peers/"$PEER"/asn`
        PUBKEY=`cat /etc/peer2anonet/peers/"$PEER"/pubkey`
        SECKEY=`cat /etc/peer2anonet/peers/"$PEER"/seckey`

        echo "
protocol bgp $PEER { table AnoNet_routes;
 local as $P2A_ASN;
 neighbor $PEERIP as $PEERASN;
 source address $P2A_IP;
 import filter only_AnoNet_ebgp;
 export filter only_AnoNet_ebgp_export;
}" >> /services/bird/bird.conf

        if [ -e /etc/peer2anonet/peers/"$PEER"/run ]; then
            cp /etc/peer2anonet/peers/$PEER/run /services/"$PEER"/run
        else
            echo "#!/bin/bash
# uncomment if your peer has a dynamic IP
#
#export REMOTE_FLOAT=1

# uncomment for debugging. you'll need to use ./run to view output instead
# of svc -u /service/<peer name>
#
#export DEBUG=1

export REMOTE_ADDRESS=$REMOTEIP
export REMOTE_PORT=$PEERPORT
export LOCAL_PORT=2${PEERASN:0:5}
export PRIVATE_KEY=$SECKEY
export PUBLIC_KEY=$PUBKEY
export TUN_MODE=1
export INTERFACE=ppp-$PEER

# uncomment if you want to nuke your default gateway and configure
# routes only to peers through IcannNet. If any of your peers use
# dynamic IP's or you use Tor or i2p then this is probably NOT a
# good idea. You may need to modify the DEFAULT_ROUTE code below.
# If you run into problems with this please email d3v11@d3v11.ano
# so I can create a patch.
#
#DEFAULT_ROUTE=\`ip route show | grep default | cut -d' ' -f 3\`
#route del default gw \$DEFAULT_ROUTE
#route add \$REMOTE_ADDRESS gw \$DEFAULT_ROUTE

( sleep 5;
 ip addr add $P2A_IP peer $PEERIP/32 dev \$INTERFACE scope link
 ip addr add $P2A_ROUTE/32 dev \$INTERFACE scope global
 ip link set dev \$INTERFACE up
# comment the following ping line to remove pinghack. this is a
# trick used to help bird connect.
 ping -c 1 -I \$INTERFACE $PEERIP -r -w 5
) &
exec /usr/sbin/quicktun.nacltai" > /etc/peer2anonet/peers/$PEER/run
            cp /etc/peer2anonet/peers/$PEER/run /services/"$PEER"/run
        fi
        chmod +x /services/"$PEER"/run
        test -L "/service/$PEER" || ln -s "/services/$PEER" "/service/$PEER"
        svc -d "/service/$PEER" && svc -u "/service/$PEER"
    done
    test -L /service/bird || ln -s /services/bird /service/bird
    echo configure | birdc
    }

CONFIGURE_PEER(){
    echo -e '\nCONFIGURE PEER:\n'
    read -p "   Enter your peer's name: " PEER
    read -p "   Enter your peer's remote ip: " REMOTEIP
    read -p "   Enter your peer's peering ip: " PEERIP
    read -p "   Enter your peer's remote port: " PEERPORT
    read -p "   Enter your peer's asn: " PEERASN
    read -p "   Enter your peer's public key: " PUBKEY
    read -p "   Enter your private key: " SECKEY
    mkdir -p /etc/peer2anonet/peers/"$PEER"
    echo $REMOTEIP >/etc/peer2anonet/peers/"$PEER"/remote_ip
    echo $PEERIP >/etc/peer2anonet/peers/"$PEER"/peering_ip
    echo $PEERPORT >/etc/peer2anonet/peers/"$PEER"/port
    echo $PEERASN >/etc/peer2anonet/peers/"$PEER"/asn
    echo $PUBKEY >/etc/peer2anonet/peers/"$PEER"/pubkey
    echo $SECKEY >/etc/peer2anonet/peers/"$PEER"/seckey
    echo -e "\n   configured $PEER\n"
    }

RM_PEER(){
    echo -e '\nRM PEER:\n'
    read -p "   Enter your peer's name: " PEER
    if [ -e /etc/peer2anonet/peers/"$PEER" ]; then
        rm -r /etc/peer2anonet/peers/"$PEER"
        echo
        echo -e "   removed /etc/peer2anonet/peers/$PEER\n"
    else
        echo
        echo -e "   error: /etc/peer2anonet/peers/$PEER not exists\n"
        exit 1
    fi
    }

INSTALL_DAEMONTOOLS(){
    [[ $(echo X`which gcc`) == X ]] && echo '   error: cannot find gcc'
    [[ $(echo X`which gcc`) == X ]] && exit 1
    [[ $(echo X`which make`) == X ]] && echo '   error: cannot find make'
    [[ $(echo X`which make`) == X ]] && exit 1
    mkdir -p /package
    chmod 1755 /package
    cd /package
    wget http://cr.yp.to/daemontools/daemontools-0.76.tar.gz
    gunzip daemontools-0.76.tar
    tar -xpf daemontools-0.76.tar
    rm -f daemontools-0.76.tar
    cd admin/daemontools-0.76
    sed -i 's/gcc/gcc -include errno.h/g' src/conf-cc
    package/install
    }


if [ "$1" == '--configure' ]; then
    CONFIGURE
elif [ "$1" == '--update' ]; then
    UPDATE
elif [ "$1" == '--configure-peer' ]; then
    CONFIGURE_PEER
    UPDATE
elif [ "$1" == '--rm-peer' ]; then
    RM_PEER
    UPDATE
elif [ "$1" == '--rm-peer' ]; then
    INSTALL_DAEMONTOOLS
else
    USAGE
fi



